var _ = require('lodash');

var _new = function(nm, module) {
	var _name = null;
	var _properties = [];
	var _methods = {};
	var _services = [];
	var _dtos = [];
	var _strict = false;

	if(nm === null || nm === undefined || nm.length < 1) {
		module.fatal('DTO Name Isn\'t Defined');
	} else {
		_name = nm;
	}

	var _DTOInstance = function() {
		var _values = {};

		var _create = function(obj) {
			for(var key in obj) {
				_set(key, obj[key]);
			}

			for(var i = 0; i < _properties.length; i++) {
				var Prop = _properties[i];
				var name = Prop.name;

				if(Prop.required === true) {
					if(obj[name] === undefined) {
						module.fatal('Fatal Error: DTO ' + nm + ' missing required property - ' + key);
					}
				}
			}

			return _get();
		};

		var _init = function() {
			for(var i = 0; i < properties.length; i++) {
				var def = properties.def;
				var key = property.name;

				if(def) {
					_set(key, def);
				} else {
					_set(key, null);
				}
			}
		};

		var _set = function(key, value) {
			if(_keyExists(key)) {
				if(_typeSupported(key, value)) {
					_values[key] = value;
				} else {
					module.fatal('Fatal Error: DTO ' + nm + ' only supports ' + _getType(key) + ' for ' + key + '. ' + value + ' ( ' + (typeof value) + ' ) found.');
				}
			} else {
				if(_strict === true) {
					module.fatal('Fatal Error: DTO ' + nm + ' doesn\'t define the key ' + key);
				}
			}
		};

		var _get = function() {
			return _values;
		};

		var _test = function(obj) {
			for(var key in obj) {
				var value = obj[key];
				if(_keyExists(key)) {
					if(_typeSupported(key, value) === false) {
						return 'Fatal Error: DTO ' + nm + ' only supports ' + _getType(key) + ' for ' + key + '. ' + value + ' ( ' + (typeof value) + ' ) found.';
					}
				} else {
					if(_strict === true) {
						return 'Fatal Error: DTO ' + nm + ' doesn\'t define the key - ' + key;
					}
				}
			}

			for(var i = 0; i < _properties.length; i++) {
				var Prop = _properties[i];
				var name = Prop.name;

				if(Prop.required === true) {
					if(obj[name] === undefined) {
						return 'Fatal Error: DTO ' + nm + ' missing required property - ' + name;
					}
				}
			}

			return null;
		};

		this.get = _get;
		this.set = _set;
		this.$create = _create;
		this.$test = _test;
	};

	var _DTOProperty = function() {
		this.name = '';
		this.type = '';
		this.description = '';
		this.example = '';
		this.default = '';
		this.required = false;
	};

	var _getName = function() {
		return _name;
	};

	var _addProperty = function(name, type, def, description, example, required) {
		var Prop = new _DTOProperty();

		if(_typeExists(type)) {
			Prop.name = name;
			Prop.type = type;
			Prop.default = def;
			Prop.description = description;
			Prop.example = example;
			Prop.required = required;

			_properties.push(Prop);

			if(!_typeSupported(name, def)) {
				module.fatal('Fatal Error: DTO ' + nm + ' only supports ' + _getType(name) + ' for ' + name + '. ' + def + ' ( ' + (typeof def) + ' ) found on default value.');
			}
		} else {
			module.fatal('DTO Type Not Supported For DTO ' + nm + ' property ' + name + ' : ' + type);
		}
	};

	var _getProperties = function() {
		return _properties;
	};

	var $get = function() {
		var _DTO = new _DTOInstance();
		for(var method in _methods) {
			_DTO[method] = function() {
				return _DTO.$create(_methods[method].apply(null, arguments));
			};
		}

		return _DTO;
	};

	var _keyExists = function(nm) {
		for(var i = 0; i < _properties.length; i++) {
			if(_properties[i].name === nm) {
				return true;
			}
		}

		return false;
	};

	var _getProperty = function(nm) {
		for(var i = 0; i < _properties.length; i++) {
			if(_properties[i].name === nm) {
				return _properties[i];
			}
		}
	};

	var _isDTO = function(type) {
		if(type[0] === '@') {
			var DTO = module.getDTO(type.substr(1));
			if(DTO !== undefined) {
				return true;
			}
		}

		return false;
	}

	var _typeExists = function(type) {
		if(_isDTO(type)) {
			return true;
		}

		switch(type) {
			case 'string':
				return true;
			case 'int':
				return true;
			case 'number':
				return true;
			case 'array':
				return true;
		}

		return false;
	}

	var _typeSupported = function(key, value) {
		var property = _getProperty(key);

		if(value === null) {
			return true;
		}

		if(property !== undefined) {
			switch(property.type) {
				case 'string':
					if(_.isString(value)) {
						return true;
					}

					return false;
				case 'int':
					if(_.isNumber(value)) {
						if((value + '').indexOf('.') === -1) {
							return true;
						}
					}

					return false;
				case 'number':
					if(_.isNumber(value)) {
						return true;
					}

					return false;
				case 'array':
					if(_.isArray(value)) {
						return true;
					}

					return false;
				default:
					if(_isDTO(key)) {
						if(_.isObject(value)) {
							return true;
						}
					}
			}
		}

		return false;
	};

	var _getType = function(nm) {
		return _getProperty(nm).type;
	};

	var _setMethods = function(methods) {
		_methods = methods;
	};

	var __addSrv = function(srv) {
		_services.push(srv);
	};

	var __addDTO = function(dto) {
		_dtos.push(dto);
	};

	var __getServices = function() {
		return _services;
	};

	var __getDTOs = function() {
		return _dtos;
	};

	var isStrict = function(bool) {
		if(bool !== undefined) {
			_strict = bool;
		} else {
			return _strict;
		}
	};

	return {
		$get: $get,
		getName: _getName,
		getProperties: _getProperties,
		addProperty: _addProperty,
		setMethods: _setMethods,
		isStrict: isStrict,
		__addSrv: __addSrv,
		__addDTO: __addDTO,
		__getServices: __getServices,
		__getDTOs: __getDTOs
	}
}

module.exports = _new;