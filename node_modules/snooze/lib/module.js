var colors = require('colors'); // for logging
var express = require('express');
var _ = require('lodash');

var bodyParser = require('body-parser');
var multer = require('multer');

var _controller = require('./controller');
var _validator = require('./validator');
var _service = require('./service');
var _dto = require('./dto');
var routeManager = require('./routeManager');

var _new = function(nm, modules) {
	var snooze = require('./snooze');

	var _app = express();

	var _name = null;
	var _port = 8000;
	var _postLimit = '50mb';
	var _logging = true;

	var _modules = [];

	var _routeManager = null;

	var _controllers = [];
	var _validators = [];
	var _services = [];
	var _dtos = [];

	var _libs = [];

	if(modules !== undefined) {
		var _modules = modules;
	}

	if(nm === null || nm === undefined || nm.length < 1) {
		_fatal('Module Name Isn\'t Defined');
	} else {
		_name = nm;
	}

	var wakeup = function() {
		_app.use(bodyParser({size: _postLimit}));
		_app.use(bodyParser.json({size: _postLimit}));
		_app.use(multer({dest: './.tmp'}));

		for(var i = 0; i < _libs.length; i++) {
			var path = process.cwd() + '/' + _libs[i];
			_log(('opening lib path ' + path).yellow);

			require('fs').readdirSync(path).forEach(function(file) {
			  
			  _log(('+ ' + file).yellow);

			  require(path + '/' + file);
			});
		}

		importModules();

		_.each(_dtos, function(dto) {
			compileDTO(dto);
		});

		_.each(_controllers, function(ctrl) {
			compileCtrl(ctrl);
		});

		_.each(_services, function(srv) {
			compileService(srv);
		});

		_.each(_validators, function(vd) {
			compileValidator(vd);
		});

		_routeManager.compile();
		_app.listen(_port);

		_log('Is it morning already?'.red);
		_log(('snooze started on port ' + _port).green);
	};

	var libs = function(libs) {
		for(var i = 0; i < libs.length; i++) {
			_libs.push(libs[i]);
		}

		return this;
	}

	var serviceExists = function(nm) {
		var srv = _.find(_services, function(service) {
			return service.getName() === nm;
		});

		if(srv === undefined) {
			return false;
		}

		return true;
	};

	var dtoExists = function(nm) {
		var dto = _.find(_dtos, function(dto) {
			return dto.getName() === nm;
		});

		if(dto === undefined) {
			return false;
		}

		return true;
	};

	var controllerExists = function(nm) {
		var ctrl = _.find(_controllers, function(controller) {
			return controller.getName() === nm;
		});

		if(ctrl === undefined) {
			return false;
		}

		return true;
	};

	var validatorExists = function(nm) {
		var vd = _.find(_validators, function(validator) {
			return validator.getName() === nm;
		});

		if(vd === undefined) {
			return false;
		}

		return true;
	};

	var getValidator = function(nm) {
		return _.find(_validators, function(validator) {
			return validator.getName() === nm;
		});
	};

	var getController = function(nm) {
		return _.find(_controllers, function(controller) {
			return controller.getName() === nm;
		});
	};

	var getService = function(nm) {
		return _.find(_services, function(service) {
			return service.getName() === nm;
		});
	};

	var getDTO = function(nm) {
		return _.find(_dtos, function(DTO) {
			return DTO.getName() === nm;
		});
	};

	var getName = function() {
		return _name;
	};

	var getExpress = function() {
		return _app;
	};

	var controller = function(nm, func) {
		if(controllerExists(nm)) {
			_fatal('Duplicate controller exists: ' + nm);
		} else {
			var ctrl = _controller(nm, this);
			_controllers.push(ctrl);

			ctrl._func = func;
		}

		return this;
	};

	var dto = function(nm, json) {
		if(dtoExists(nm)) {
			_fatal('Duplicate dto exists: ' + nm);
		} else {
			var dto = _dto(nm, this);
			dto.__json = json;

			_dtos.push(dto);
		}

		return this;
	};

	var service = function(nm, func) {
		if(serviceExists(nm)) {
			_fatal('Duplicate service exists: ' + nm);
		} else {
			var srv = _service(nm, this);
			_services.push(srv);

			srv._func = func;
		}

		return this;
	};

	var validator = function(nm, func) {
		if(validatorExists(nm)) {
			_fatal('Duplicate validator exists: ' + nm);
		} else {
			var vd = _validator(nm, this);
			_validators.push(vd);
			
			vd._func = func;
		}

		return this;
	};

	var config = function(cb) {
		this.cb = cb;
		this.cb();
	};

	var route = function(method, path, options) {
		if(_routeManager === null) {
			_routeManager = routeManager(this);
		}
		
		if(_routeManager.routeExists(method, path)) {
			_fatal('Duplicate route exists for: ' + method + ' => ' + path);
		} else {
			_routeManager.createRoute(this, method, path, options);
		}

		return this;
	};

	var setPort = function(prt) {
		_port = prt;
	};

	var setPostLimit = function(postLimit) {
		_postLimit = postLimit;
	};

	var compileCtrl = function(ctrl) {
		var parameters = getParams(ctrl._func);

		var args = [];
		for(var i = 0; i < parameters.length; i++) {
			var parameter = parameters[i];
			var inj = getService(parameter);
			if(inj === undefined) {
				inj = getDTO(parameter);
				if(inj !== undefined) {
					inj = inj.$get();
					ctrl.__addDTO(parameter);
				}
			} else {
				ctrl.__addSrv(parameter);
			}

			if(inj === undefined) {
				_fatal('Injectable Service or DTO Not Found in Controller ' + ctrl.getName() + ' : ' + parameter);
			}

			args.push(inj);
		}

		var methods = ctrl._func.apply(null, args);
		for(var key in methods) {
			ctrl[key] = methods[key];
		}
	};

	var compileService = function(srv) {
		var parameters = getParams(srv._func);

		var args = [];
		for(var i = 0; i < parameters.length; i++) {
			var parameter = parameters[i];
			var inj = getService(parameter);
			if(inj === undefined) {
				inj = getDTO(parameter);
				if(inj !== undefined) {
					inj = inj.$get();
					srv.__addDTO(parameter);
				}
			} else {
				srv.__addSrv(parameter);
			}

			if(inj === undefined) {
				_fatal('Injectable Service or DTO Not Found in Service ' + srv.getName() + ' : ' + parameter);
			}

			args.push(inj);
		}

		var methods = srv._func.apply(null, args);
		for(var key in methods) {
			srv[key] = methods[key];
		}
	};

	var compileValidator = function(vd) {
		var parameters = getParams(vd._func);

		var args = [];

		for(var i = 0; i < parameters.length; i++) {
			var parameter = parameters[i];
			var inj = getService(parameter);
			if(inj === undefined) {
				inj = getDTO(parameter);
				if(inj !== undefined) {
					inj = inj.$get();
					vd.__addDTO(parameter);
				}
			} else {
				vd.__addSrv(parameter);
			}

			if(inj === undefined) {
				_fatal('Injectable Service or DTO Not Found in Validator ' + vd.getName() + ' : ' + parameter);
			}

			args.push(inj);
		}

		var func = vd._func.apply(null, args);

		vd.setTest(func);
	};

	var compileDTO = function(dto) {
		var json = dto.__json;

		for(var key in json) {
			if(key.substr(0,2) !== '__') {
				var type = json[key].type || null;
				var def = json[key].default || null;
				var description = json[key].description || null;
				var example = json[key].example || null;
				var required = json[key].required || false;

				dto.addProperty(key, type, def, description, example, required);
			}
		}

		var methods = json.__methods;
		for(var method in methods) {
			var parameters = getParams(methods[method]);
			var args = [];

			for(var i = 0; i < parameters.length; i++) {
				var parameter = parameters[i];
				var inj = getService(parameter);
				if(inj === undefined) {
					inj = getDTO(parameter);
					if(inj !== undefined) {
						inj = inj.$get();
						dto.__addDTO(parameter);
					}
				} else {
					dto.__addSrv(parameter);
				}

				if(inj === undefined) {
					_fatal('Injectable Service or DTO Not Found in DTO ' + dto.getName() + ' : ' + parameter);
				}

				args.push(inj);
			}

			methods[method] = methods[method].apply(null, args);
		}

		var strict = json.__strict || false;
		dto.isStrict(strict);

		dto.setMethods(methods);
	};

	var getRoutes = function(type) {
		return _routeManager.getRoutes(type);
	};

	var getControllers = function() {
		return _controllers;
	};

	var getServices = function() {
		return _services;
	};

	var getValidators = function() {
		return _validators;
	};

	var getDTOs = function() {
		return _dtos;
	};
	
	var getParams = function(func) {
		var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
		var ARGUMENT_NAMES = /([^\s,]+)/g;
		var fnStr = func.toString().replace(STRIP_COMMENTS, '');
		var result = fnStr.slice(fnStr.indexOf('(')+1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
		if(result === null) {
			result = [];
		}
			
		return result
	};

	var addModules = function(modules) {
		for(var i = 0; i < modules.length; i++) {
			_modules.push(modules[i]);
		}
	};

	var importModules = function() {
		for(var i = 0; i < _modules.length; i++) {
			var _mod = snooze.module(_modules[i]);

			_log(('Importing ' + _mod.getName()).blue);

			controllers = _mod.getControllers();
			services = _mod.getServices();
			validators = _mod.getValidators();
			dtos = _mod.getDTOs();

			for(var i = 0; i < controllers.length; i++) {
				var controller = controllers[i];
				if(controllerExists(controller.getName()) === false) {
					_log(('+ ' + controller.getName()).blue);
					_controllers.push(controller);
				}
			}

			for(var i = 0; i < services.length; i++) {
				var service = services[i];
				if(serviceExists(service.getName()) === false) {
					_log(('+ ' + service.getName()).blue);
					_services.push(service);
				}
			}

			for(var i = 0; i < validators.length; i++) {
				var validator = validators[i];
				if(validatorExists(validator.getName()) === false) {
					_log(('+ ' + validator.getName()).blue);
					_validators.push(validator);
				}
			}

			for(var i = 0; i < dtos.length; i++) {
				var dto = dtos[i];
				if(dtoExists(dto.getName()) === false) {
					_log(('+ ' + dto.getName()).blue);
					_dtos.push(dto);
				}
			}
		}
	};

	var disableLogging = function() {
		_logging = false;
	};

	var enableLogging = function() {
		_logging = true;
	};

	var _log = function() {
		var log = Function.prototype.bind.call(console.log, console);
		if(_logging === true) {
			log.apply(console, arguments);
		}
	};

	var _fatal = function(str) {
		console.log(str.red);
		_exit(1);
	};

	var _exit = function(code) {
		process.exit(code);
	};

	return {
		'getName': getName,
		'getExpress': getExpress,
		'getController': getController,
		'getValidator': getValidator,
		'getService': getService,
		'getDTO': getDTO,
		'controller': controller,
		'validator': validator,
		'service': service,
		'dto': dto,
		'config': config,
		'route': route,
		'setPort': setPort,
		'wakeup': wakeup,
		'addModules': addModules,
		'getControllers': getControllers,
		'getServices': getServices,
		'getValidators': getValidators,
		'getRoutes': getRoutes,
		'getDTOs': getDTOs,
		'libs': libs,
		'log': _log,
		'fatal': _fatal,
		'disableLogging': disableLogging,
		'enableLogging': enableLogging,
		'exit': _exit
	};
}

module.exports = _new;